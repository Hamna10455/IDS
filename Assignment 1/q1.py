# -*- coding: utf-8 -*-
"""q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LSllvrUZOuq4YrkgtlCXn8-uZrrvNvNJ
"""

# 18 Sep 2023
# CSC461 – Assignment1 – Web Scraping
# Hamna Ashraf
# sp20-bse-047
# This code gives title and rating of my fav movies
import requests
from bs4 import BeautifulSoup
import time
import pandas as pd

# Create a list of movie URLs
movie_urls = [
    'https://www.imdb.com/title/tt0120338/',  # Titanic
    'https://www.imdb.com/title/tt1375666/',  # Inception
    'https://www.imdb.com/title/tt0499549/',  # Avatar 2009
    'https://www.imdb.com/title/tt0167260/',  # The Lord of the Rings: The Return of the King
    'https://www.imdb.com/title/tt4154796/'   # Avengers: Endgame
]

# Function to scrape data from a movie page
def scrape_movie_data(url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        time.sleep(1)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find title and rating using different selectors
        title = soup.find('h1', class_='TitleHeader__TitleText-sc-1wu6n3d-0').text.strip()

        rating = soup.find('span', class_='sc-bde20123-1 iZlgcd').text.strip()

        return {'Title': title, 'Rating': rating}
        print(rating)
    except Exception as e:
        print(f"Error scraping {url}: {str(e)}")
        return None

# Iterate through the list of movie URLs and scrape data
movie_data = []
for url in movie_urls:
    data = scrape_movie_data(url)
    if data:
        movie_data.append(data)

# Create a pandas DataFrame and export it to an Excel file
df = pd.DataFrame(movie_data)
df.to_excel('favorite_movies.xlsx', index=False)